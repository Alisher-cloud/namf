; PlatformIO Project Configuration File
;
; Please visit documentation for the other options and examples
; http://docs.platformio.org/page/projectconf.html
[platformio]
;See upload_config.ini.example for ideas how to use. Example is for OTA upload with password. If You
;have non standard setup You can change there upload_port or other params. It will take over params
;configured in platformio.ini
extra_configs =
  upload_config.ini

[common]
; build flags used by NAMF:
; -D DBG_NAMF_TIMES - enable to get more information on execution times of new scheduler. Needed only for NAMF developers
;     should not be any use from that flag on live sensor.
; -D DBG_NAMF_SDS_NO_DATA - enable to force SDS subsystem report no readings as -1 in data to Influx (not in other APIs)

build_flags =
  -D PIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY
  -D BEARSSL_SSL_BASIC
  -D VTABLES_IN_DRAM
  -D HTTPCLIENT_1_1_COMPATIBLE=0
  -D DEBUG_ESP_OOM
  -Wl,-Teagle.flash.4m2m.ld     ; not really elegant, should be moved to board_build.ldscript
;  -ggdb3

; board_build.ldscript = eagle.flash.4m2m.ld ; but it seams that this doesn't work properly :(

board_build.f_cpu = 160000000L  ; required by BEARSSL
board_build.f_flash = 40000000L

; Available flash modes: qio / qout / dio / dout
board_build.flash_mode = dio

lib_deps_external =
  https://github.com/nettigo/Adafruit_BME280_Library.git
  ;Adafruit BME280 Library@2.0.1
  adafruit/Adafruit BMP085 Library @ ^1.2.1
  adafruit/Adafruit BMP280 Library @ ^2.4.0
  ;Adafruit HTU21DF Library@1.0.2
  Adafruit Unified Sensor@1.1.2
  ArduinoJson@5.13.4
  DallasTemperature@3.8.0
  thingpulse/ESP8266 and ESP32 OLED driver for SSD1306 displays @ 4.2.0
  OneWire@2.3.5
  AsyncPing(esp8266)@1.1.0

  DNSServer
  ESP8266HTTPClient
  ESP8266WebServer
  ESP8266WiFi
  ESP8266httpUpdate
  ESP8266mDNS
  plerup/EspSoftwareSerial @ ^8.0.0
  SPI
  https://github.com/mikalhart/TinyGPSPlus.git#v0.95
  https://github.com/Sensirion/arduino-sps.git#cf56687f7a861ab1b124d0abc7a641e1b6ef6010
  Wire
  576@1.1.4 ;LiquidCrystal_I2C
  https://github.com/pilotak/ClosedCube_SHT31D_Arduino.git
;  robtillaart/PCF8574

extra_scripts =
  platformio_script.py
  pre:generate_language_files.py
platform_version = espressif8266@4.1.0

[env]
lib_ldf_mode = chain+  ; automatically detect libraries by the used includes
;lib_ldf_mode = off  ; all used libs must be explicitly referenced
monitor_speed = 115200
;upload_speed = 460800 ; Failsafe
upload_speed = 1000000 ; Don't waste your life waiting for upload! Just buy a propper cable!

[env:lang_pl]
lang = pl
platform = ${common.platform_version}
framework = arduino
board = nodemcuv2
board_build.f_cpu = ${common.board_build.f_cpu}
board_build.f_flash = ${common.board_build.f_flash}
board_build.flash_mode = ${common.board_build.flash_mode}
;debug - see: https://github.com/esp8266/Arduino/blob/master/boards.txt
build_flags = ${common.build_flags} -DINTL_PL -DNDEBUG
;-DDEBUG_ESP_HTTP_CLIENT -DDEBUG_ESP_PORT=Serial
;  !python utils/add_timestamp.py
;-DNDEBUG
;-DDEBUG_ESP_WIFI -DNDEBUG_ESP_OOM -DDEBUG_ESP_PORT=Serial
lib_deps = ${common.lib_deps_external}
extra_scripts = ${common.extra_scripts}

;[env:pl_d1_mini_pro]
;lang = pl
;platform = ${common.platform_version}
;framework = arduino
;board = d1_mini_pro
;board_build.f_cpu = ${common.board_build.f_cpu}
;board_build.f_flash = ${common.board_build.f_flash}
;board_build.flash_mode = ${common.board_build.flash_mode}
;;debug - see: https://github.com/esp8266/Arduino/blob/master/boards.txt
;build_flags = ${common.build_flags} -DINTL_PL -DNDEBUG
;              !python utils/add_timestamp.py
;;-DNDEBUG
;;-DDEBUG_ESP_WIFI -DNDEBUG_ESP_OOM -DDEBUG_ESP_PORT=Serial
;lib_deps = ${common.lib_deps_external}
;extra_scripts = ${common.extra_scripts}


;Minmal firmware as a step to boot new firmware (new SPIFFS) when migrating from old 1:3m flash
[env:wemos-boot]
lang = boot
platform = ${common.platform_version}
framework = arduino
board = nodemcuv2
board_build.f_cpu = ${common.board_build.f_cpu}
build_flags = ${common.build_flags} -DINTL_EN -DBOOT_FW -DNDEBUG
lib_deps = ${common.lib_deps_external}
extra_scripts = ${common.extra_scripts}

;[env:langdbg]
;lang = pl
;build_type = debug
;platform = ${common.platform_version}
;framework = arduino
;board = nodemcuv2
;board_build.f_cpu = ${common.board_build.f_cpu}
;build_flags = ${common.build_flags} -DINTL_PL
;lib_deps = ${common.lib_deps_external}
;extra_scripts = ${common.extra_scripts}

[env:lang_en]
lang = en
platform = ${common.platform_version}
framework = arduino
board = nodemcuv2
board_build.f_cpu = ${common.board_build.f_cpu}
build_flags = ${common.build_flags} -DINTL_EN -DNDEBUG
lib_deps = ${common.lib_deps_external}
extra_scripts = ${common.extra_scripts}

[env:lang_hu]
lang = hu
platform = ${common.platform_version}
framework = arduino
board = nodemcuv2
board_build.f_cpu = ${common.board_build.f_cpu}
build_flags = ${common.build_flags} -DINTL_HU -DNDEBUG
lib_deps = ${common.lib_deps_external}
extra_scripts = ${common.extra_scripts}

[env:lang_ro]
lang = ro
platform = ${common.platform_version}
framework = arduino
board = nodemcuv2
board_build.f_cpu = ${common.board_build.f_cpu}
build_flags = ${common.build_flags} -DINTL_RO -DNDEBUG
lib_deps = ${common.lib_deps_external}
extra_scripts = ${common.extra_scripts}

; [env:lang_de]
; lang = de
; platform = ${common.platform_version}
; framework = arduino
; board = nodemcuv2
; board_build.f_cpu = ${common.board_build.f_cpu}
; build_flags = ${common.build_flags} '-DINTL_DE'
; lib_deps = ${common.lib_deps_external}
; extra_scripts = ${common.extra_scripts}

; [env:lang_bg]
; lang = bg
; platform = ${common.platform_version}
; framework = arduino
; board = nodemcuv2
; board_build.f_cpu = ${common.board_build.f_cpu}
; build_flags = ${common.build_flags} '-DINTL_BG'
; lib_deps = ${common.lib_deps_external}
; extra_scripts = ${common.extra_scripts}

; [env:lang_cz]
; lang = cz
; platform = ${common.platform_version}
; framework = arduino
; board = nodemcuv2
; board_build.f_cpu = ${common.board_build.f_cpu}
; build_flags = ${common.build_flags} '-DINTL_CZ'
; lib_deps = ${common.lib_deps_external}
; extra_scripts = ${common.extra_scripts}

; [env:lang_dk]
; lang = dk
; platform = ${common.platform_version}
; framework = arduino
; board = nodemcuv2
; board_build.f_cpu = ${common.board_build.f_cpu}
; build_flags = ${common.build_flags} '-DINTL_DK'
; lib_deps = ${common.lib_deps_external}
; extra_scripts = ${common.extra_scripts}

; [env:lang_es]
; lang = es
; platform = ${common.platform_version}
; framework = arduino
; board = nodemcuv2
; board_build.f_cpu = ${common.board_build.f_cpu}
; build_flags = ${common.build_flags} '-DINTL_ES'
; lib_deps = ${common.lib_deps_external}
; extra_scripts = ${common.extra_scripts}

; [env:lang_fr]
; lang = fr
; platform = ${common.platform_version}
; framework = arduino
; board = nodemcuv2
; board_build.f_cpu = ${common.board_build.f_cpu}
; build_flags = ${common.build_flags} '-DINTL_FR'
; lib_deps = ${common.lib_deps_external}
; extra_scripts = ${common.extra_scripts}

; [env:lang_it]
; lang = it
; platform = ${common.platform_version}
; framework = arduino
; board = nodemcuv2
; board_build.f_cpu = ${common.board_build.f_cpu}
; build_flags = ${common.build_flags} '-DINTL_IT'
; lib_deps = ${common.lib_deps_external}
; extra_scripts = ${common.extra_scripts}

; [env:lang_lu]
; lang = lu
; platform = ${common.platform_version}
; framework = arduino
; board = nodemcuv2
; board_build.f_cpu = ${common.board_build.f_cpu}
; build_flags = ${common.build_flags} '-DINTL_LU'
; lib_deps = ${common.lib_deps_external}
; extra_scripts = ${common.extra_scripts}

; [env:lang_nl]
; lang = nl
; platform = ${common.platform_version}
; framework = arduino
; board = nodemcuv2
; board_build.f_cpu = ${common.board_build.f_cpu}
; build_flags = ${common.build_flags} '-DINTL_NL'
; lib_deps = ${common.lib_deps_external}
; extra_scripts = ${common.extra_scripts}

; ;[env:lang_pl]
; ;lang = pl
; ;platform = espressif8266
; ;framework = arduino
; ;board = nodemcuv2
; ;board_build.f_cpu = ${common.board_build.f_cpu}
; ;build_flags = ${common.build_flags} '-DINTL_PL'
; ;lib_deps = ${common.lib_deps_external}
; ;extra_scripts = ${common.extra_scripts}

; [env:lang_pt]
; lang = pt
; platform = ${common.platform_version}
; framework = arduino
; board = nodemcuv2
; board_build.f_cpu = ${common.board_build.f_cpu}
; build_flags = ${common.build_flags} '-DINTL_PT'
; lib_deps = ${common.lib_deps_external}
; extra_scripts = ${common.extra_scripts}

; [env:lang_ru]
; lang = ru
; platform = ${common.platform_version}
; framework = arduino
; board = nodemcuv2
; board_build.f_cpu = ${common.board_build.f_cpu}
; build_flags = ${common.build_flags} '-DINTL_RU'
; lib_deps = ${common.lib_deps_external}
; extra_scripts = ${common.extra_scripts}

; [env:lang_se]
; lang = se
; platform = ${common.platform_version}
; framework = arduino
; board = nodemcuv2
; board_build.f_cpu = ${common.board_build.f_cpu}
; build_flags = ${common.build_flags} '-DINTL_SE'
; lib_deps = ${common.lib_deps_external}
; extra_scripts = ${common.extra_scripts}
